*carbon* *carbon.txt* *carbon.nvim.txt*

  `Version: 0.1.0`
  `Licence: MIT`
  `Source:  https://github.com/SidOfc/carbon.nvim`
  `Author:  Sidney Liebrand <sidneyliebrand@gmail.com>`

  Carbon is a simple directory tree viewer for Neovim written in Lua.

================================================================================
TABLE OF CONTENTS                                     *carbon-contents* *carbon-toc*

  To quickly jump to this table of contents, use |gg| or |go|.
  To navigate to the helptag below the cursor, use CTRL-].

  TABLE OF CONTENTS `.........` |carbon-contents|
  USAGE `.....................` |carbon-usage|
  SETUP `.....................` |carbon-setup|
  COMMANDS `..................` |carbon-commands|
  PLUGS `.....................` |carbon-plugs|
  UTIL `......................` |carbon-util|
  ENTRY `.....................` |carbon-entry|
  BUFFER `....................` |carbon-buffer|
  WATCHER `...................` |carbon-watcher|
  SETTINGS `..................` |carbon-settings|

================================================================================
USAGE                                                               *carbon-usage*

  Carbon automatically replaces |netrw| and remaps NetRW's |Explore| and
  |Lexplore| commands to Carbon's |Carbon| and |Lcarbon| commands respectively.

  For more specific usage and configuration information, see:

  - |carbon-commands| for command details.
  - |carbon-plugs| for mapping details.
  - |carbon-setup| for configuration details.

================================================================================
SETUP                                                               *carbon-setup*

  The behavior of this plugin can be customized by calling
  `require('carbon').setup` in your |$MYVIMRC| like this:

  init.lua:
  `require('carbon').setup({`
  `  setting = 'value',`
  `})`

  init.vim:
  `lua << EOF`
  `  require('carbon').setup({`
  `    setting = 'value',`
  `  })`
  `EOF`

  If setting options directly is preferred, passing a function
  is also possible:

  init.lua:
  `require('carbon').setup(function(settings)`
  `  settings.setting = 'value',`
  `end)`

  init.vim:
  `lua << EOF`
  `  require('carbon').setup(function(settings)`
  `    settings.setting = 'value',`
  `  end)`
  `EOF`

  The default settings are documented in |carbon-settings|. Any settings
  supplied to `setup` when called with a table will be deep merged with
  the defaults. When `setup` is called with a function argument, settings
  are directly modified and no merging of any kind will occur.

================================================================================
COMMANDS                                                         *carbon-commands*

  This section documents the behavior as well as the implementation of the
  various |command| commands provided by Carbon.

  `------------------------------------------------------------------------------`
  Carbon                                                                  *Carbon*

  Implementation: `:lua require('carbon').explore()`
  Alias:          Explore unless |carbon-settings-keep-netrw| is enabled.

  This command replaces the current buffer with the Carbon buffer.

  `------------------------------------------------------------------------------`
  Lcarbon                                                                *Lcarbon*

  Implementation: `:lua require('carbon').explore_left()`
  Alias:          Lexplore unless |carbon-settings-keep-netrw| is enabled.

  Opens the Carbon buffer in a new vertical split. When Carbon is opened this
  way, pressing the key mapped to |carbon-plug-edit| will open files in a
  split directly to the right.

================================================================================
PLUGS                                                               *carbon-plugs*

  Documentation for the default |<Plug>| mappings that Carbon provides.
  |<Plug>| mappings are created unconditionally.

  `------------------------------------------------------------------------------`
  <plug>(carbon-up)                                               *carbon-plug-up*

  Implementation: `:<c-u>lua require('carbon').up()<cr>`
  Mapping:        |carbon-settings-actions-up|

  Sets Carbon's root to the parent directory of the current working directory.
  Accepts a [count].

  `------------------------------------------------------------------------------`
  <plug>(carbon-down)                                           *carbon-plug-down*

  Implementation: `:<c-u>lua require('carbon').down()<cr>`
  Mapping:        |carbon-settings-actions-down|

  Sets Carbon's root to the directory under the cursor. If the entry under the
  cursor is a file then the parent directory of the file's path will be used.
  Accepts a [count] to allow navigating deeper into compressed paths.

  `------------------------------------------------------------------------------`
  <plug>(carbon-edit)                                           *carbon-plug-edit*

  Implementation: `:<c-u>lua require('carbon').edit()<cr>`
  Mapping:        |carbon-settings-actions-edit|

  If the entry below the cursor is a directory, opens or closes the
  directory. Otherwise the file is opened in the current window unless the
  |Lcarbon| command was used.

  `------------------------------------------------------------------------------`
  <plug>(carbon-reset)                                         *carbon-plug-reset*

  Implementation: `:<c-u>lua require('carbon').reset()<cr>`
  Mapping:        |carbon-settings-actions-reset|

  Sets Carbon's root to the initial directory that Neovim was opened with.

  `------------------------------------------------------------------------------`
  <plug>(carbon-split)                                         *carbon-plug-split*

  Implementation: `:<c-u>lua require('carbon').split()<cr>`
  Mapping:        |carbon-settings-actions-split|

  Opens the entry below the cursor in a new |split| if it is a file. If the
  entry is a directory then nothing happens.

  `------------------------------------------------------------------------------`
  <plug>(carbon-vsplit)                                       *carbon-plug-vsplit*

  Implementation: `:<c-u>lua require('carbon').vsplit()<cr>`
  Mapping:        |carbon-settings-actions-vsplit|

  Opens the entry below the cursor in a new |vsplit| if it is a file. If the
  entry is a directory then nothing happens.

================================================================================
UTIL                                                                 *carbon-util*

  Usage: `require('carbon.util')`

  This sections describes the internal utilities used by Carbon itself. These
  methods must always be considered unstable and should not be used in code
  external to Carbon.

  `------------------------------------------------------------------------------`
  plug                                                          *carbon-util-plug*

  `require('carbon.util').plug(`{name}`)`

  Converts {name} to a |<Plug>| map string. For example calling
  `require('carbon.util').plug('up')` will return the string `'<plug>(carbon-up)'`.

  This function fails when {name} is not a string.

  `------------------------------------------------------------------------------`
  tbl_find                                                  *carbon-util-tbl-find*

  `require('carbon.util').tbl_find(`{tbl}, {callback}`)`

  Execute `callback(`{value}, {key}`)` for each value in {tbl} until {callback}
  returns a truthy value. When {callback} returns true, return {value} and
  {key}. When no item is found, return `nil`.

  This function fails when {tbl} is not a table or when
  {callback} is not callable.

  `------------------------------------------------------------------------------`
  tbl_except                                              *carbon-util-tbl-except*

  `require('carbon.util').tbl_except(`{tbl}, {keys}`)`

  Return a new table with all keys from {tbl} except
  those specified in {keys}.

  This function fails when either {tbl} or {keys} is not a table.

  `------------------------------------------------------------------------------`
  map                                                            *carbon-util-map*

  `require('carbon.util').map(`{lhs}, {rhs}[, {options}]`)`

  Wraps |nvim_set_keymap| and |nvim_buf_set_keymap|. Maps {lhs} to
  {rhs}. An optional {options} table can supplied. It accepts the same
  options as |nvim_set_keymap| does and also supports two extra options:
  `mode` which defaults to `'n'` and `buffer` which defaults to `nil`.

  To create a |Visual| mapping pass `mode = 'v'`, to create a buffer-local
  mapping pass `buffer = <bufnr>` where `<bufnr>` is a |bufnr()|.

  The `mode` and `buffer` options are not passed to |nvim_set_keymap|
  functions because they are explicitly filtered out for internal use by the
  map utility function. All other {options} keys will be passed through.

  This function fails when {lhs} or {rhs} are not strings or if {options} is
  provided but not a table.

  `------------------------------------------------------------------------------`
  command                                                    *carbon-util-command*

  `require('carbon.util').command(`{lhs}, {rhs}[, {options}]`)`

  Wraps |nvim_add_user_command|. The only difference between this
  function and |nvim_add_user_command| is that the {options} argument is
  optional, when not passed it will default to an empty table.

  This function fails when {lhs} or {rhs} are not strings or if {options} is
  provided but not a table.

  `------------------------------------------------------------------------------`
  highlight                                                *carbon-util-highlight*

  `require('carbon.util').highlight(`{group}, {properties}`)`

  Builds a |highlight| command for {group} using provided {properties} and
  executes that command. {group} will be the highlight group name. {properties}
  is a table accepting any properties that can be passed to |highlight|.

  This function fails when {group} is not a string or when {properties}
  is not a table.

================================================================================
ENTRY                                                               *carbon-entry*

  Usage: `require('carbon.entry')`

  Provides a consistent interface for working with files and directories and
  includes methods for fetching, caching, sorting, watching, and unwatching
  entries. See |carbon-entry-new| for details on entry objects, a term which
  will be used throughout this section to refer to entry instance objects.

  WARNING:
  static methods of this module are called using dot-syntax (`.`) whereas
  instance methods of this module are called using colon-syntax (`:`). This
  difference is visible in the function signature of each method.

  `------------------------------------------------------------------------------`
  new                                                           *carbon-entry-new*

  Signature: `require('carbon.entry').new(`{path}[, {parent}]`)`

  Returns a new entry object for provided absolute {path}. The {path}
  parameter must be a string. {path} may point to files as well as
  directories. When {parent} is supplied, it is set as the entry object's
  `parent` property. {parent} must be another entry object if provided.

  The returned entry object has the following shape:

  `{`
  `  path = '/absolute/path/to/file-or-dir',`
  `  name = 'file-or-dir',`
  `  is_directory = false,`
  `  is_executable = false,`
  `  is_symlink = nil,`
  `}`

  - `path` is the absolute {path}.
  - `name` is the tail of given {path} as returned by |fnamemodify| `:t`.
  - `is_directory` is `true` when |isdirectory| equals `1`.
  - `is_executable` is `true` when |isdirectory| equals `0` and |executable| equals `1`.
  - `is_symlink` is:
    - `2` when {path} does not equal |resolve| of {path} and |getftime| equals `-1`.
    - `1` when {path} does not equal |resolve| of {path} and |getftime| is not `-1`.
    - `nil` otherwise.

  For `is_symlink`, a value of `2` indicates a broken symlink, a value of `1`
  indicates a valid symlink, and `nil` is used when {path} is not a symlink.

  The following methods can be called on entries:

  - |carbon-entry-synchronize|
  - |carbon-entry-children|
  - |carbon-entry-has-children|
  - |carbon-entry-get-children|
  - |carbon-entry-set-children|

  For example: `require('carbon.entry').new('/'):children()` will return a
  table with the direct children of `/` as entry objects.

  This function will fail if {path} is not a path to an existing file or
  directory and passing a {parent} that is not an entry object created via
  `require('carbon.entry').new()` will lead to fatal rendering errors.

  `------------------------------------------------------------------------------`
  find                                                         *carbon-entry-find*

  Signature: `require('carbon.entry').find(`{path}`)`

  Used to find the entry object associated with {path}. The {path} entry must
  already be loaded by Carbon for this to work. That is, it only finds
  children that have already been loaded by Carbon.

  When an entry object matches {path} it is returned, otherwise the return
  value will be `nil`. This function will not fail if {path} is not a string!

  For more information about entry objects, see: |carbon-entry-new|.

  `------------------------------------------------------------------------------`
  clean                                                       *carbon-entry-clean*

  Signature: `require('carbon.entry').clean(`{path}`)`

  Removes all parent and sibling files and directories from the internal
  children cache used by Carbon. Also removes watchers from all removed
  children.

  WARNING:
  It is not recommended to call this function manually because it
  has a high likelyhood of breaking Carbon if not used with caution. It is
  only documented for completeness.

  `------------------------------------------------------------------------------`
  synchronize                                           *carbon-entry-synchronize*

  Signature: `entry:synchronize()`

  The variable `entry` in this section refers to an entry object as returned by
  the |carbon-entry-new| function.

  When `entry.is_directory` is `true`, synchronizes all its children with the
  current state of the file system recursively. Files and folders that were
  added, removed, renamed, or had their permissions changed within `entry.path`
  will be refreshed.

  When `entry.is_directory` is `false`, nothing happens because Carbon only
  listens to changes on and within directories.

  `------------------------------------------------------------------------------`
  children                                                 *carbon-entry-children*

  Signature: `entry:children()`

  The variable `entry` in this section refers to an entry object as returned by
  the |carbon-entry-new| function.

  When `entry.is_directory` is true, fetches children using
  |carbon-entry-get-children| and caches them. Always returns a table with
  child entry objects or an empty table if it has no children such as regular
  files and empty directories.

  `------------------------------------------------------------------------------`
  has_children                                         *carbon-entry-has-children*

  Signature: `entry:has_children()`

  The variable `entry` in this section refers to an entry object as returned by
  the |carbon-entry-new| function.

  Returns `true` when children of `entry.path` have already been cached.
  Returns `false` otherwise.

  `------------------------------------------------------------------------------`
  set_children                                         *carbon-entry-set-children*

  Signature: `entry:set_children(`{children}`)`

  The variable `entry` in this section refers to an entry object as returned by
  the |carbon-entry-new| function.

  Set the cached children of `entry.path` to {children}. The {children} must
  be a table with entry object elements or `nil`.

  When {children} is `nil` the next call to |carbon-entry-children| will
  result in a fresh listing directly from the file system.

  `------------------------------------------------------------------------------`
  get_children                                         *carbon-entry-get-children*

  Signature: `entry:get_children()`

  The variable `entry` in this section refers to an entry object as returned by
  the |carbon-entry-new| function.

  Returns a table of entry object elements by calling |readdir| on `entry.path`.
  The entry objects will be direct children of `entry.path`. The table will be
  sorted in case-insensitive alphabetical order and all directories will come
  before any files.

  Paths matching any of the patterns defined in |carbon-settings-exclude| will
  be excluded from the returned table.

================================================================================
BUFFER                                                             *carbon-buffer*

  `------------------------------------------------------------------------------`
  handle                                                    *carbon-buffer-handle*

  `------------------------------------------------------------------------------`
  show                                                        *carbon-buffer-show*

  `------------------------------------------------------------------------------`
  render                                                    *carbon-buffer-render*

  `------------------------------------------------------------------------------`
  cursor                                                    *carbon-buffer-cursor*

  `------------------------------------------------------------------------------`
  lines                                                      *carbon-buffer-lines*

  `------------------------------------------------------------------------------`
  synchronize                                          *carbon-buffer-synchronize*

  `------------------------------------------------------------------------------`
  up                                                            *carbon-buffer-up*

  `------------------------------------------------------------------------------`
  down                                                        *carbon-buffer-down*

  `------------------------------------------------------------------------------`
  cd                                                            *carbon-buffer-cd*

  `------------------------------------------------------------------------------`
  reset                                                      *carbon-buffer-reset*

================================================================================
WATCHER                                                           *carbon-watcher*

  `------------------------------------------------------------------------------`
  on                                                           *carbon-watcher-on*

  `------------------------------------------------------------------------------`
  off                                                         *carbon-watcher-off*

  `------------------------------------------------------------------------------`
  emit                                                       *carbon-watcher-emit*

  `------------------------------------------------------------------------------`
  clear                                                     *carbon-watcher-clear*

  `------------------------------------------------------------------------------`
  release                                                 *carbon-watcher-release*

  `------------------------------------------------------------------------------`
  register                                               *carbon-watcher-register*

================================================================================
SETTINGS                                                         *carbon-settings*

  `------------------------------------------------------------------------------`
  compress                                              *carbon-settings-compress*

  `------------------------------------------------------------------------------`
  auto_open                                            *carbon-settings-auto-open*

  `------------------------------------------------------------------------------`
  keep_netrw                                          *carbon-settings-keep-netrw*

  `------------------------------------------------------------------------------`
  sync_on-cd                                          *carbon-settings-sync-on-cd*

  `------------------------------------------------------------------------------`
  sync_delay                                          *carbon-settings-sync-delay*

  `------------------------------------------------------------------------------`
  sidebar_width                                    *carbon-settings-sidebar-width*

  `------------------------------------------------------------------------------`
  exclude                                                *carbon-settings-exclude*

  `------------------------------------------------------------------------------`
  indicators                                          *carbon-settings-indicators*

  `------------------------------------------------------------------------------`
  actions                                                *carbon-settings-actions*

  `------------------------------------------------------------------------------`
  highlights                                          *carbon-settings-highlights*
