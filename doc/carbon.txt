*carbon* *carbon.txt* *carbon.nvim.txt*

  `Version: 0.1.0`
  `Licence: MIT`
  `Source:  https://github.com/SidOfc/carbon.nvim`
  `Author:  Sidney Liebrand <sidneyliebrand@gmail.com>`

  Carbon is a simple directory tree viewer for Neovim written in Lua.

================================================================================
TABLE OF CONTENTS                                     *carbon-contents* *carbon-toc*

  To quickly jump to this table of contents, use |gg| or |go|.
  To navigate to the helptag below the cursor, use CTRL-].

  TABLE OF CONTENTS `.........` |carbon-contents|
  USAGE `.....................` |carbon-usage|
  COMMANDS `..................` |carbon-commands|
  PLUGS `.....................` |carbon-plugs|
  SETUP `.....................` |carbon-setup|
  UTIL `......................` |carbon-util|
  ENTRY `.....................` |carbon-entry|
  BUFFER `....................` |carbon-buffer|
  WATCHER `...................` |carbon-watcher|
  SETTINGS `..................` |carbon-settings|

================================================================================
USAGE                                                               *carbon-usage*

  Carbon automatically replaces |netrw| and remaps NetRW's |Explore| and
  |Lexplore| commands to Carbon's |Carbon| and |Lcarbon| commands respectively.

  For more specific usage and configuration information, see:
  `-` |carbon-commands| for command details.
  `-` |carbon-plugs| for mapping details.
  `-` |carbon-setup| for configuration details.

================================================================================
COMMANDS                                                         *carbon-commands*

  Carbon `................................................................` *Carbon*

  Implementation: `:lua require('carbon').explore()`
  Alias:          Explore unless |carbon-settings-keep-netrw| is enabled.

  This command replaces the current buffer with the Carbon buffer.

  Lcarbon `..............................................................` *Lcarbon*

  Implementation: `:lua require('carbon').explore_left()`
  Alias:          Lexplore unless |carbon-settings-keep-netrw| is enabled.

  Opens the Carbon buffer in a new vertical split. When Carbon is opened this
  way, pressing the key mapped to |carbon-plug-edit| will open files in a
  split directly to the right.

================================================================================
PLUGS                                                               *carbon-plugs*

  All |<Plug>| mappings are created unconditionally.

  <plug>(carbon-up) `.............................................` *carbon-plug-up*

  Implementation: `:<c-u>lua require('carbon').up()<cr>`
  Mapping:        |carbon-settings-actions-up|

  Sets Carbon's root to the parent directory of the current working directory.
  Accepts a [count].

  <plug>(carbon-down) `.........................................` *carbon-plug-down*

  Implementation: `:<c-u>lua require('carbon').down()<cr>`
  Mapping:        |carbon-settings-actions-down|

  Sets Carbon's root to the directory under the cursor. If the entry under the
  cursor is a file then the parent directory of the file's path will be used.
  Accepts a [count] to allow navigating deeper into compressed paths.

  <plug>(carbon-edit) `.........................................` *carbon-plug-edit*

  Implementation: `:<c-u>lua require('carbon').edit()<cr>`
  Mapping:        |carbon-settings-actions-edit|

  If the entry below the cursor is a directory, opens or closes the
  directory. Otherwise the file is opened in the current window unless the
  |Lcarbon| command was used.

  <plug>(carbon-reset) `.......................................` *carbon-plug-reset*

  Implementation: `:<c-u>lua require('carbon').reset()<cr>`
  Mapping:        |carbon-settings-actions-reset|

  Sets Carbon's root to the initial directory that Neovim was opened with.

  <plug>(carbon-split) `.......................................` *carbon-plug-split*

  Implementation: `:<c-u>lua require('carbon').split()<cr>`
  Mapping:        |carbon-settings-actions-split|

  Opens the entry below the cursor in a new |split| if it is a file. If the
  entry is a directory then nothing happens.

  <plug>(carbon-vsplit) `.....................................` *carbon-plug-vsplit*

  Implementation: `:<c-u>lua require('carbon').vsplit()<cr>`
  Mapping:        |carbon-settings-actions-vsplit|

  Opens the entry below the cursor in a new |vsplit| if it is a file. If the
  entry is a directory then nothing happens.

================================================================================
SETUP                                                               *carbon-setup*

  The behavior of this plugin can be customized by calling
  `require('carbon').setup` in your |$MYVIMRC| like this:

  init.lua:
  `require('carbon').setup({`
  `  setting = 'value',`
  `})`

  init.vim:
  `lua << EOF`
  `  require('carbon').setup({`
  `    setting = 'value',`
  `  })`
  `EOF`

  If setting options directly is preferred, passing a function
  is also possible:

  init.lua:
  `require('carbon').setup(function(settings)`
  `  settings.setting = 'value',`
  `end)`

  init.vim:
  `lua << EOF`
  `  require('carbon').setup(function(settings)`
  `    settings.setting = 'value',`
  `  end)`
  `EOF`

  The default settings are documented in |carbon-settings|. Any settings
  supplied to `setup` when called with a table will be deep merged with
  the defaults. When `setup` is called with a function argument, settings
  are directly modified and no merging of any kind will occur.

================================================================================
UTIL                                                                 *carbon-util*

  plug `........................................................` *carbon-util-plug*

  `require('carbon.util').plug(`{name}`)`

  Converts {name} to a |<Plug>| map string. For example calling
  `require('carbon.util').plug('up')` will return the string `'<plug>(carbon-up)'`.

  This function fails when {name} is not a string.

  tbl_find `................................................` *carbon-util-tbl-find*

  `require('carbon.util').tbl_find(`{tbl}, {callback}`)`

  Execute `callback(`{value}, {key}`)` for each value in {tbl} until {callback}
  returns a truthy value. When {callback} returns true, return {value} and
  {key}. When no item is found, return `nil`.

  This function fails when {tbl} is not a table or when
  {callback} is not callable.

  tbl_except `............................................` *carbon-util-tbl-except*

  `require('carbon.util').tbl_except(`{tbl}, {keys}`)`

  Return a new table with all keys from {tbl} except
  those specified in {keys}.

  This function fails when either {tbl} or {keys} is not a table.

  map `..........................................................` *carbon-util-map*

  `require('carbon.util').map(`{lhs}, {rhs}[, {options}]`)`

  Wraps |nvim_set_keymap| and |nvim_buf_set_keymap|. Maps {lhs} to
  {rhs}. An optional {options} table can supplied. It accepts the same
  options as |nvim_set_keymap| does and also supports two extra options:
  `mode` which defaults to `'n'` and `buffer` which defaults to `nil`.

  To create a |Visual| mapping pass `mode = 'v'`, to create a buffer-local
  mapping pass `buffer = <bufnr>` where `<bufnr>` is a |bufnr()|.

  The `mode` and `buffer` options are not passed to |nvim_set_keymap|
  functions because they are explicitly filtered out for internal use by the
  map utility function. All other {options} keys will be passed through.

  This function fails when {lhs} or {rhs} are not strings or if {options} is
  provided but not a table.

  command `..................................................` *carbon-util-command*

  `require('carbon.util').command(`{lhs}, {rhs}[, {options}]`)`

  Wraps |nvim_add_user_command|. The only difference between this
  function and |nvim_add_user_command| is that the {options} argument is
  optional, when not passed it will default to an empty table.

  This function fails when {lhs} or {rhs} are not strings or if {options} is
  provided but not a table.

  highlight `..............................................` *carbon-util-highlight*

  `require('carbon.util').highlight(`{group}, {properties}`)`

  Builds a |highlight| command for {group} using provided {properties} and
  executes that command. {group} will be the highlight group name. {properties}
  is a table accepting any properties that can be passed to |highlight|.

  This function fails when {group} is not a string or when {properties}
  is not a table.

================================================================================
ENTRY                                                               *carbon-entry*

  new `.........................................................` *carbon-entry-new*

  find `.......................................................` *carbon-entry-find*

  clean `.....................................................` *carbon-entry-clean*

  synchronize `.........................................` *carbon-entry-synchronize*

  children `...............................................` *carbon-entry-children*

  has_children `.......................................` *carbon-entry-has-children*

  set_children `.......................................` *carbon-entry-set-children*

  get_children `.......................................` *carbon-entry-get-children*

================================================================================
BUFFER                                                             *carbon-buffer*

  handle `..................................................` *carbon-buffer-handle*

  show `......................................................` *carbon-buffer-show*

  render `..................................................` *carbon-buffer-render*

  cursor `..................................................` *carbon-buffer-cursor*

  lines `....................................................` *carbon-buffer-lines*

  synchronize `........................................` *carbon-buffer-synchronize*

  up `..........................................................` *carbon-buffer-up*

  down `......................................................` *carbon-buffer-down*

  cd `..........................................................` *carbon-buffer-cd*

  reset `....................................................` *carbon-buffer-reset*

================================================================================
WATCHER                                                           *carbon-watcher*

  on `.........................................................` *carbon-watcher-on*

  off `.......................................................` *carbon-watcher-off*

  emit `.....................................................` *carbon-watcher-emit*

  clear `...................................................` *carbon-watcher-clear*

  release `...............................................` *carbon-watcher-release*

  register `.............................................` *carbon-watcher-register*

================================================================================
SETTINGS                                                         *carbon-settings*

  compress `............................................` *carbon-settings-compress*

  auto_open `..........................................` *carbon-settings-auto-open*

  keep_netrw `........................................` *carbon-settings-keep-netrw*

  sync_on-cd `........................................` *carbon-settings-sync-on-cd*

  sync_delay `........................................` *carbon-settings-sync-delay*

  sidebar_width `..................................` *carbon-settings-sidebar-width*

  exclude `..............................................` *carbon-settings-exclude*

  indicators `........................................` *carbon-settings-indicators*

  actions `..............................................` *carbon-settings-actions*

  highlights `........................................` *carbon-settings-highlights*
